
Programming:
	- Interpreter - 75
		Message:  "Write an interpreter which will open the file input_stream.bin and execute the instructions encoded within. A successful interpreter will print out the flag. PM @ENS Teddy Kim for scoring."
		Hint:  ""
		File:  	- input_stream.bin
			- interpreter.h
			- README.md
		Notes:	
		Solution: 
	- Software Development - 75
		Message:  "See README. Submit answers via PM to @ENS Teddy Kim. Max of 75 points."
		Hint:  ""
		File:  	- softwaredev.zip
		Notes:	
		Solution: 
	- Performance Programming - 300
		Message:  "See README. PM solutions to @ENS Teddy Kim. 25-300 points, depending on the quality of the solution."
		Hint:  ""
		File:  	- benchmark
			- checker.py
			- README.md
		Notes:	
		Solution: 
Pwn: 
	- Win - 50
		Message:  "Can you figure out how to win this challenge? Connect to cweaccessionsctf.com:1337."
		Hint:  ""
		File:  	- win
		Notes:	
		Flag: flag{no_stack_smashing_here}
		Solution: I used strings on the file.  Looking through it, two things stuck out to me, a long string of "Q"s and a shell command "cat flag.txt" right about the initial server response.  I plugged that list of Qs in and got a seg fault.  I cut the number of Qs back hoping to find the number right before it seg faulted but in the process I found the perfect number that ran the cat command.  I telnet'd to the server, dropped those Qs in the input and got the flag.
	- Shell - 75
		Message:  "
I see that NX is disabled on this binary......
Connect to cweaccessionsctf.com:1370.
Note: ASLR is disabled on the server. Check this out to disable it on your local machine: https://askubuntu.com/questions/318315/how-can-i-temporarily-disable-aslr-address-space-layout-randomization"
		Hint:  ""
		File:  	- shell
		Notes:	
		Solution: 
	- Canary - 125
		Message:  "I see that this binary might have a little birdie nesting in it. Can you figure out how to get past it to get to the flag?
Connect to cweaccessionsctf.com:1360."
		Hint:  ""
		File:  	- canary
		Notes:	Found function read_in called in main, seems to be preventing stack smashing, but there something funny about it.
		Solution: 

Forensics:
	- File Ninja - 50
		Message:  "One of our new employees has stopped showing up to work. We think he took the job just to steal our flag, but we have no idea how he got it off his work laptop - we blocked access to most of the internet except developer specific sites. See if you can figure out how he got the flag off the system by analyzing a image of his laptop's filesystem."
		Hint:  ""
		File:  	- backup.iso
		Flag:  flag{g1t_15_c0mplex_pbtrg3hv6d}
		Solution:  I looked around for a bit in the backup.iso file on Windows, dropping random files in Notepad++.  I eventually dropped the .iso file in Kali and extracted it to a separate file.  I ran the command "grep -r flag [extracted backup.iso folder]".  Scrolling through, in DOCUMENT/WORK_FOL/_GIT/CONFIG the line of text "flag = ZmxhZ3tnMXRfMTVfYzBtcGxleF9wYnRyZzNodjZkfQ==" popped up at the end.  I tried dropping it in the answer box as it was but didn't work.  I then used base64decode.org to decode the flag and got the above flag as the answer.
		https://www.base64decode.org/
	- The New 2.0 - 115
		Message:  "We have been surveilling a known hacker's internet traffic. He mostly just looks at online hacking forums. However, we think he's transmitted a flag to an associate through some means. We can't figure it out, can you?"
		Hint:  "You can decrypt TLSv1.2+ traffic using a keylog file."
		File:  	- capture.pcapng
			- sslkeylog.log
		Notes:	
		Solution: 
	- Rabbit Hole - 115
		Message:  "We received a weird email. We deleted it, but you can look at a copy that was made."
		Hint:  "Inspect ALL files that you come accross for the flag."
		File:  	- email.txt
		Notes:	Decoded some of it.  the file is some kind of PDF file, with a star wars line in it.  "A long time ago in a galaxy far, far away"
		Solution: 

Reversing:
	- Input/Output - 50
		Message:  "What output is generated by the x86 code given in input-output.txt if the input is the decimal number 1337?
Note: the flag is just the output decimal number."
		Hint:  ""
		File:  	- input-output.txt
		Notes:	
		Solution: 
	- Input/Output - 50
		Message:  "Can you figure out how to unscramble this binary?"
		Hint:  ""
		File:  	- scrambled
		Notes:	
		Solution: 
	- Hash - 100
		Message:  "We found x86 code that was used as a hashing function in x86.txt. Create the equivalent C code from the x86 code, and use it to hash the string "Hello World."
Note: The resulting hash value is the flag.
To help you, starter_code.c is provided as a template to reconstruct the x86 code.
Additionally, in hash_output.txt, there are original hash outputs for the substrings of "Hello World" so that you can see if you are on the right track."
		Hint:  ""
		File:  	- hash_output.txt
			- starter_code.c
			- x86.txt
		Notes:	
		Solution: 

Crypto:
	- Classic - 50
		Message: "Decode me! Even Caesar might have had a little trouble."
		File: 	- classic.txt
		Solution: Went to the site below, used the following alphabet andshifted through until I go the flag.
			https://cryptii.com/pipes/caesar-cipher
			Alphabet: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
			Shift: 89
			Flag: flag{Caes@r_c0uldnt_sH!ft_L!ke_this}
	- Diffie-cult - 75
		Message:  "We've managed to intercept a Diffie-Hellman key exchange. We know that p=1009, g=4, A=635, and B=442. We also know that a and b are both two digit numbers. Find a and b.
Note: the flag for this challenge will be in the following format: a,b"
		Hint:  "Check this website out if you're unfamiliar with Diffie-Hellman: https://www.comparitech.com/blog/information-security/diffie-hellman-key-exchange/"
		File:  	- classic.txt
		Notes:	https://www.irongeek.com/diffie-hellman.php
			635 = g^a mod p == 4^a mod 1009 :: a = 252n + 42.
			442 = g^a mod p == 4^b mod 1009 :: b = 252n + 55.
		Solution: 
			Flag: 42,55
	- Rolled - 100
		Message:  "Do you think you can break this crypto that we rolled? Check it out at cweaccessionsctf.com:1350. Note: The flag is in flag format, and consists only of lowercase letters, plus '{' and '}'."
		Hint:  ""
		File:  	
		Notes:	
		Solution: 

Misc:
	- Socketz - 75
		Message:  "Connect to cweaccessionsctf.com:1340 and see if you can get a flag! I'd recommend you'd script this though, unless you really want to do 500 math problems."
		Hint:  ""
		File:  	
		Notes:	I tried connecting to the socket with a C program but was having problems send a response back.  I tried using Python to do the same thing but ran into the same problem.  I tried just net-catting to it and was able to send answer and have them be accepted.  I attempted to write a batch script to get input in from netcat, parse it for the equation and send the answer back but ran out of time to figure it out.  
/*
 ============================================================================
 Name        : Socketz.c
 Author      :
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

/****************** CLIENT CODE ****************/

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main(){
int clientSocket;
char buffer[1024];
int sendBuffer = 68;
char charSendBuffer[2];
char* stringBuff = "68\0";
struct sockaddr_in serverAddr;
socklen_t addr_size;

/*---- Create the socket. The three arguments are: ----*/
/* 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case) */
clientSocket = socket(PF_INET, SOCK_STREAM, 0);

/*---- Configure settings of the server address struct ----*/
/* Address family = Internet */
serverAddr.sin_family = AF_INET;
/* Set port number, using htons function to use proper byte order */
serverAddr.sin_port = htons(1340);
/* Set IP address to localhost */
serverAddr.sin_addr.s_addr = inet_addr("52.227.157.244");
/* Set all bits of the padding field to 0 */
memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

/*---- Connect the socket to the server using the address struct ----*/
addr_size = sizeof serverAddr;
connect(clientSocket, (struct sockaddr *) &serverAddr, addr_size);

/*---- Read the message from the server into the buffer ----*/
recv(clientSocket, buffer, 1024, 0);
printf("-- %s",buffer);

sendBuffer = 68;
charSendBuffer[0] = '6';
charSendBuffer[1] = '8';
// sendBuffer[1] = 0;
send(clientSocket, &stringBuff, sizeof(stringBuff), 0);
for(int i = 0; i < sizeof(buffer); i++){
buffer[i] = '\0';
}
recv(clientSocket, buffer, 1024, 0);
/*---- Print the received message ----*/
printf("-- %s",buffer);

//  for(int i = 0; i < sizeof(buffer); i++) {
//  printf("Byte: %d   --  Character: %c\n", i, buffer[i]);
//  }

return 0;
}


#!/usr/bin/python           # This is client.py file


import socket               # Import socket module

s = socket.socket()         # Create a socket object
host = socket.gethostbyname('cweaccessionsctf.com')   # Get local machine name
port = 1340                # Reserve a port for your service.

# create a socket at client side
# using TCP / IP protocol
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

x = 68
st = str(x)
byt = st.encode()


s.connect((host, port))
print(s.recv(1024))
# int_val = 30 + 38
# byte_val = int_val.to_bytes(2, 'big')
# print('Byte: ')
# print(byte_val)
# print('Int: ')
# print(int_val)
s.send(b'\x00\x44D')
print(s.recv(1024))

s.close()                     # Close the socket when done

		Solution: 

	- Of Least Significance - 75
		Message:  "There's a flag hidden inside the given text! Can you figure out how to extract it?"
		Hint:  "I would do some research on stegonography."
		File:  	- theLeastSignificant.txt
		Notes:	
		Solution: 
	- Closest - 75
		Message:  " There are a lot of interesting people living in Viriginia currently. Can you figure out which of the people listed in the CSV file lives the closest to the coordinates 37.065984, -79.601172?
Note: The flag is just the full name of the person closest to the coordinates.
		Hint:  "I highly recommend checking out this site: https://geocoding.geo.census.gov/geocoder/Geocoding_Services_API.pdf"
		File:  	- Addresses.csv
		Notes:	https://en.wikipedia.org/wiki/List_of_cities_and_counties_in_Virginia
	https://www.google.com/maps/place/37%C2%B003'57.5%22N+79%C2%B036'04.2%22W/@37.0747944,-79.6887828,12z/data=!4m5!3m4!1s0x0:0x0!8m2!3d37.065984!4d-79.601172
https://geocoding.geo.census.gov/geocoder/Addresses.csv
		Flag: Richard Howe
		Solution: Read through the link from the hint.  At the bottom was a section for batch geocoding in formats that include CSV files, which is what was given in the problem.  I looked at the CSV given a bit, more than a thousand entries.  The batch geocoding said the file must be in a unique ID, street address, city, state, zip order.  Street address was the only required field, everything else could be a null value.  Wasn't sure what to use for a null value.  I punched the coordinates into google maps and it put the location in the middle of a lake in Virginia.  I made a copy of the the addresses file and deleted the names column.  Pasted "Viginia" in the all the cells in the columns next to the city cells and a space in the column for zip code.  I got Malformed input file or file not of type CSV error in the output file. it gave an example of a good file to use (https://geocoding.geo.census.gov/geocoder/Addresses.csv).  I noticed I forgot the unique identifier column and replaced the names as unique numbers (just incremented from 1 every cell).  I got a better result with no errors, but didn't get any matches.  I put the value 10000 in as the zipcode value and ran again.  The two closest coordinates were in Wirtz VA, and of those, looking it up in the original address list was Richard Howe.  
The command I ran was "curl --form addressFile=@addresses_ready.csv --form benchmark=2020 https://geocoding.geo.census.gov/geocoder/locations/addressbatch --output geocoderesult.csv"

			

